; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\dap.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\dap.d --cpu=Cortex-M3 --apcs=interwork --no_unaligned_access --diag_suppress=9931 -I..\..\startup -I..\..\cmsis-core -I..\src -I..\..\GIGA32\inc -I..\..\GIGA32\src -I..\..\GIGA32\gd32\peripherals\inc -I..\..\GIGA32\gd32\peripherals\src -I.\RTE\_Target_1 -IF:\software\mdk\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IF:\software\mdk\ARM\CMSIS\Include -D__UVISION_VERSION=524 -DSTM32F10X_MD -DDAPLINK_VERSION=242 -DHID_ENDPOINT -DMSC_ENDPOINT -DCDC_ENDPOINT -DDAPLINK_IF -DDAPLINK_BUILD_KEY=0x9B939E8F -DINTERFACE_GD32F103 -DCPU_GD32F103CBT6 -DDAPLINK_HIC_ID=0x97969905 -DBL_TARGET_FLASH -DUSE_STDPERIPH_DRIVER -DGD32F10X_MD -DUSE_HSE_16MHZ --omf_browse=.\objects\dap.crf ..\..\GIGA32\src\DAP.c]
                          THUMB

                          AREA ||i.DAP_ProcessCommand||, CODE, READONLY, ALIGN=2

                  DAP_ProcessCommand PROC
;;;1200   //   return:   number of bytes in response
;;;1201   uint32_t DAP_ProcessCommand(uint8_t *request, uint8_t *response) {
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1202     uint32_t num;
;;;1203   
;;;1204     if ((*request >= ID_DAP_Vendor0) && (*request <= ID_DAP_Vendor31)) {
000004  7802              LDRB     r2,[r0,#0]
000006  f1a20380          SUB      r3,r2,#0x80
00000a  2b1f              CMP      r3,#0x1f
00000c  d803              BHI      |L1.22|
;;;1205       return DAP_ProcessVendorCommand(request, response);
00000e  f7fffffe          BL       DAP_ProcessVendorCommand
                  |L1.18|
;;;1206     }
;;;1207   
;;;1208     *response++ = *request;
;;;1209   
;;;1210     switch (*request++) {
;;;1211       case ID_DAP_Info:
;;;1212         num = DAP_Info(*request, response+1);
;;;1213         *response = num;
;;;1214         return (2 + num);
;;;1215       case ID_DAP_HostStatus:
;;;1216         num = DAP_HostStatus(request, response);
;;;1217         break;
;;;1218       case ID_DAP_Connect:
;;;1219         num = DAP_Connect(request, response);
;;;1220         break;
;;;1221       case ID_DAP_Disconnect:
;;;1222         num = DAP_Disconnect(response);
;;;1223         break;
;;;1224       case ID_DAP_Delay:
;;;1225         num = DAP_Delay(request, response);
;;;1226         break;
;;;1227       case ID_DAP_ResetTarget:
;;;1228         num = DAP_ResetTarget(response);
;;;1229         break;
;;;1230   
;;;1231   #if ((DAP_SWD != 0) || (DAP_JTAG != 0))
;;;1232       case ID_DAP_SWJ_Pins:
;;;1233         num = DAP_SWJ_Pins(request, response);
;;;1234         break;
;;;1235       case ID_DAP_SWJ_Clock:
;;;1236         num = DAP_SWJ_Clock(request, response);
;;;1237         break;
;;;1238       case ID_DAP_SWJ_Sequence:
;;;1239         num = DAP_SWJ_Sequence(request, response);
;;;1240         break;
;;;1241   #else
;;;1242       case ID_DAP_SWJ_Pins:
;;;1243       case ID_DAP_SWJ_Clock:
;;;1244       case ID_DAP_SWJ_Sequence:
;;;1245         *response = DAP_ERROR;
;;;1246         return (2);
;;;1247   #endif
;;;1248   
;;;1249   #if (DAP_SWD != 0)
;;;1250       case ID_DAP_SWD_Configure:
;;;1251         num = DAP_SWD_Configure(request, response);
;;;1252         break;
;;;1253   #else
;;;1254       case ID_DAP_SWD_Configure:
;;;1255         *response = DAP_ERROR;
;;;1256         return (2);
;;;1257   #endif
;;;1258   
;;;1259   #if (DAP_JTAG != 0)
;;;1260       case ID_DAP_JTAG_Sequence:
;;;1261         num = DAP_JTAG_Sequence(request, response);
;;;1262         break;
;;;1263       case ID_DAP_JTAG_Configure:
;;;1264         num = DAP_JTAG_Configure(request, response);
;;;1265         break;
;;;1266       case ID_DAP_JTAG_IDCODE:
;;;1267         num = DAP_JTAG_IDCode(request, response);
;;;1268         break;
;;;1269   #else
;;;1270       case ID_DAP_JTAG_Sequence:
;;;1271       case ID_DAP_JTAG_Configure:
;;;1272       case ID_DAP_JTAG_IDCODE:
;;;1273         *response = DAP_ERROR;
;;;1274         return (2);
;;;1275   #endif
;;;1276   
;;;1277       case ID_DAP_TransferConfigure:
;;;1278         num = DAP_TransferConfigure(request, response);
;;;1279         break;
;;;1280   
;;;1281       case ID_DAP_Transfer:
;;;1282         switch (DAP_Data.debug_port) {
;;;1283   #if (DAP_SWD != 0)
;;;1284           case DAP_PORT_SWD:
;;;1285             num = DAP_SWD_Transfer (request, response);
;;;1286             break;
;;;1287   #endif
;;;1288   #if (DAP_JTAG != 0)
;;;1289           case DAP_PORT_JTAG:
;;;1290             num = DAP_JTAG_Transfer(request, response);
;;;1291             break;
;;;1292   #endif
;;;1293           default:
;;;1294             *(response+0) = 0;    // Response count
;;;1295             *(response+1) = 0;    // Response value
;;;1296             num = 2;
;;;1297         }
;;;1298         break;
;;;1299   
;;;1300       case ID_DAP_TransferBlock:
;;;1301         switch (DAP_Data.debug_port) {
;;;1302   #if (DAP_SWD != 0)
;;;1303           case DAP_PORT_SWD:
;;;1304             num = DAP_SWD_TransferBlock (request, response);
;;;1305             break;
;;;1306   #endif
;;;1307   #if (DAP_JTAG != 0)
;;;1308           case DAP_PORT_JTAG:
;;;1309             num = DAP_JTAG_TransferBlock(request, response);
;;;1310             break;
;;;1311   #endif
;;;1312           default:
;;;1313             *(response+0) = 0;    // Response count [7:0]
;;;1314             *(response+1) = 0;    // Response count[15:8]
;;;1315             *(response+2) = 0;    // Response value
;;;1316             num = 3;
;;;1317         }
;;;1318         break;
;;;1319   
;;;1320       case ID_DAP_WriteABORT:
;;;1321         switch (DAP_Data.debug_port) {
;;;1322   #if (DAP_SWD != 0)
;;;1323           case DAP_PORT_SWD:
;;;1324             num = DAP_SWD_Abort (request, response);
;;;1325             break;
;;;1326   #endif
;;;1327   #if (DAP_JTAG != 0)
;;;1328           case DAP_PORT_JTAG:
;;;1329             num = DAP_JTAG_Abort(request, response);
;;;1330             break;
;;;1331   #endif
;;;1332           default:
;;;1333             *response = DAP_ERROR;
;;;1334             return (2);
;;;1335         }
;;;1336         break;
;;;1337   
;;;1338       default:
;;;1339         *(response-1) = ID_DAP_Invalid;
;;;1340         return (1);
;;;1341     }
;;;1342   
;;;1343     return (1 + num);
;;;1344   }
000012  e8bd83f8          POP      {r3-r9,pc}
                  |L1.22|
000016  f8012b01          STRB     r2,[r1],#1            ;1208
00001a  460c              MOV      r4,r1                 ;1208
00001c  f810cb01          LDRB     r12,[r0],#1           ;1210
000020  f8df91ec          LDR      r9,|L1.528|
000024  2500              MOVS     r5,#0                 ;1210
000026  2601              MOVS     r6,#1                 ;1210
000028  2240              MOVS     r2,#0x40              ;1210
00002a  4f79              LDR      r7,|L1.528|
00002c  23ff              MOVS     r3,#0xff              ;1210
00002e  4979              LDR      r1,|L1.532|
000030  f1a90910          SUB      r9,r9,#0x10           ;1210
000034  f1bc0f17          CMP      r12,#0x17             ;1210
000038  d27d              BCS      |L1.310|
00003a  e8dff00c          TBB      [pc,r12]              ;1210
00003e  0c37              DCB      0x0c,0x37
000040  486aacba          DCB      0x48,0x6a,0xac,0xba
000044  c5e4d27d          DCB      0xc5,0xe4,0xd2,0x7d
000048  8ee4e4e4          DCB      0x8e,0xe4,0xe4,0xe4
00004c  e4e49195          DCB      0xe4,0xe4,0x91,0x95
000050  99a3d5d5          DCB      0x99,0xa3,0xd5,0xd5
000054  d500              DCB      0xd5,0x00
000056  7800              LDRB     r0,[r0,#0]            ;1212
000058  1c63              ADDS     r3,r4,#1              ;1212
00005a  2100              MOVS     r1,#0                 ;1212
00005c  2805              CMP      r0,#5                 ;1212
00005e  d022              BEQ      |L1.166|
000060  dc08              BGT      |L1.116|
000062  2801              CMP      r0,#1                 ;1212
000064  d01f              BEQ      |L1.166|
000066  2802              CMP      r0,#2                 ;1212
000068  d01d              BEQ      |L1.166|
00006a  2803              CMP      r0,#3                 ;1212
00006c  d01b              BEQ      |L1.166|
00006e  2804              CMP      r0,#4                 ;1212
000070  d119              BNE      |L1.166|
000072  e008              B        |L1.134|
                  |L1.116|
000074  2806              CMP      r0,#6                 ;1212
000076  d016              BEQ      |L1.166|
000078  28f0              CMP      r0,#0xf0              ;1212
00007a  d00b              BEQ      |L1.148|
00007c  28fe              CMP      r0,#0xfe              ;1212
00007e  d00f              BEQ      |L1.160|
000080  28ff              CMP      r0,#0xff              ;1212
000082  d110              BNE      |L1.166|
000084  e008              B        |L1.152|
                  |L1.134|
000086  2204              MOVS     r2,#4                 ;1212
000088  4963              LDR      r1,|L1.536|
00008a  4618              MOV      r0,r3                 ;1212
00008c  f7fffffe          BL       __aeabi_memcpy
000090  2104              MOVS     r1,#4                 ;1212
000092  e008              B        |L1.166|
                  |L1.148|
000094  701e              STRB     r6,[r3,#0]            ;1212
000096  e005              B        |L1.164|
                  |L1.152|
000098  701a              STRB     r2,[r3,#0]            ;1212
00009a  705d              STRB     r5,[r3,#1]            ;1212
00009c  2102              MOVS     r1,#2                 ;1212
00009e  e002              B        |L1.166|
                  |L1.160|
0000a0  2004              MOVS     r0,#4                 ;1212
0000a2  7018              STRB     r0,[r3,#0]            ;1212
                  |L1.164|
0000a4  2101              MOVS     r1,#1                 ;1212
                  |L1.166|
0000a6  7021              STRB     r1,[r4,#0]            ;1213
0000a8  1c88              ADDS     r0,r1,#2              ;1213
0000aa  e7b2              B        |L1.18|
0000ac  7801              LDRB     r1,[r0,#0]
0000ae  b119              CBZ      r1,|L1.184|
0000b0  2901              CMP      r1,#1
0000b2  d009              BEQ      |L1.200|
0000b4  7023              STRB     r3,[r4,#0]
0000b6  e008              B        |L1.202|
                  |L1.184|
0000b8  7840              LDRB     r0,[r0,#1]
0000ba  07c0              LSLS     r0,r0,#31
0000bc  d003              BEQ      |L1.198|
0000be  4854              LDR      r0,|L1.528|
0000c0  1d00              ADDS     r0,r0,#4
0000c2  6002              STR      r2,[r0,#0]
0000c4  e000              B        |L1.200|
                  |L1.198|
0000c6  603a              STR      r2,[r7,#0]
                  |L1.200|
0000c8  7025              STRB     r5,[r4,#0]
                  |L1.202|
0000ca  2001              MOVS     r0,#1
0000cc  e087              B        |L1.478|
0000ce  7800              LDRB     r0,[r0,#0]
0000d0  b108              CBZ      r0,|L1.214|
0000d2  2801              CMP      r0,#1
0000d4  d16b              BNE      |L1.430|
                  |L1.214|
0000d6  700e              STRB     r6,[r1,#0]
0000d8  210d              MOVS     r1,#0xd
0000da  464d              MOV      r5,r9
0000dc  4648              MOV      r0,r9
0000de  f7fffffe          BL       pin_out
0000e2  f44f5000          MOV      r0,#0x2000
0000e6  6038              STR      r0,[r7,#0]
0000e8  210e              MOVS     r1,#0xe
0000ea  4628              MOV      r0,r5
0000ec  f7fffffe          BL       pin_out
0000f0  f44f4080          MOV      r0,#0x4000
0000f4  6038              STR      r0,[r7,#0]
0000f6  2202              MOVS     r2,#2
0000f8  210c              MOVS     r1,#0xc
0000fa  4628              MOV      r0,r5
0000fc  f7fffffe          BL       pin_in
000100  2107              MOVS     r1,#7
000102  4628              MOV      r0,r5
000104  f7fffffe          BL       pin_out
000108  2080              MOVS     r0,#0x80
00010a  6038              STR      r0,[r7,#0]
00010c  7026              STRB     r6,[r4,#0]
                  |L1.270|
00010e  4630              MOV      r0,r6                 ;1219
000110  e065              B        |L1.478|
000112  700d              STRB     r5,[r1,#0]            ;1220
000114  2200              MOVS     r2,#0                 ;1220
000116  210d              MOVS     r1,#0xd               ;1220
000118  464f              MOV      r7,r9                 ;1220
00011a  4648              MOV      r0,r9                 ;1220
00011c  f7fffffe          BL       pin_in
000120  2200              MOVS     r2,#0                 ;1220
000122  210e              MOVS     r1,#0xe               ;1220
000124  4638              MOV      r0,r7                 ;1220
000126  f7fffffe          BL       pin_in
00012a  2200              MOVS     r2,#0                 ;1220
00012c  210c              MOVS     r1,#0xc               ;1220
00012e  4638              MOV      r0,r7                 ;1220
000130  f7fffffe          BL       pin_in
000134  e03b              B        |L1.430|
                  |L1.310|
000136  e066              B        |L1.518|
000138  7841              LDRB     r1,[r0,#1]            ;1223
00013a  7800              LDRB     r0,[r0,#0]            ;1223
00013c  4a38              LDR      r2,|L1.544|
00013e  ea402101          ORR      r1,r0,r1,LSL #8       ;1223
000142  4836              LDR      r0,|L1.540|
000144  6800              LDR      r0,[r0,#0]            ;1223  ; SystemCoreClock
000146  fbb0f0f2          UDIV     r0,r0,r2              ;1223
00014a  2203              MOVS     r2,#3                 ;1223
00014c  1c80              ADDS     r0,r0,#2              ;1223
00014e  fbb0f0f2          UDIV     r0,r0,r2              ;1223
000152  4348              MULS     r0,r1,r0              ;1223
                  |L1.340|
000154  1e40              SUBS     r0,r0,#1              ;1223
000156  d1fd              BNE      |L1.340|
000158  e029              B        |L1.430|
00015a  7065              STRB     r5,[r4,#1]            ;1223
00015c  7025              STRB     r5,[r4,#0]            ;1223
00015e  e02d              B        |L1.444|
000160  4621              MOV      r1,r4                 ;1233
000162  f7fffffe          BL       DAP_SWJ_Pins
000166  e03a              B        |L1.478|
000168  4621              MOV      r1,r4                 ;1236
00016a  f7fffffe          BL       DAP_SWJ_Clock
00016e  e036              B        |L1.478|
000170  f8102b01          LDRB     r2,[r0],#1            ;1237
000174  b90a              CBNZ     r2,|L1.378|
000176  f44f7280          MOV      r2,#0x100             ;1237
                  |L1.378|
00017a  4601              MOV      r1,r0                 ;1237
00017c  4610              MOV      r0,r2                 ;1237
00017e  f7fffffe          BL       SWJ_Sequence
000182  e014              B        |L1.430|
000184  7800              LDRB     r0,[r0,#0]            ;1240
000186  f0000203          AND      r2,r0,#3              ;1240
00018a  1c52              ADDS     r2,r2,#1              ;1240
00018c  750a              STRB     r2,[r1,#0x14]         ;1240
00018e  f3c00080          UBFX     r0,r0,#2,#1           ;1240
000192  7548              STRB     r0,[r1,#0x15]         ;1240
000194  e00b              B        |L1.430|
000196  7802              LDRB     r2,[r0,#0]            ;1252
000198  720a              STRB     r2,[r1,#8]            ;1252
00019a  7882              LDRB     r2,[r0,#2]            ;1252
00019c  7843              LDRB     r3,[r0,#1]            ;1252
00019e  ea432202          ORR      r2,r3,r2,LSL #8       ;1252
0001a2  814a              STRH     r2,[r1,#0xa]          ;1252
0001a4  7902              LDRB     r2,[r0,#4]            ;1252
0001a6  78c3              LDRB     r3,[r0,#3]            ;1252
0001a8  ea432002          ORR      r0,r3,r2,LSL #8       ;1252
0001ac  8188              STRH     r0,[r1,#0xc]          ;1252
                  |L1.430|
0001ae  7025              STRB     r5,[r4,#0]            ;1252
0001b0  e7ad              B        |L1.270|
0001b2  7809              LDRB     r1,[r1,#0]            ;1282  ; DAP_Data
0001b4  2901              CMP      r1,#1                 ;1282
0001b6  d003              BEQ      |L1.448|
0001b8  7025              STRB     r5,[r4,#0]            ;1294
0001ba  7065              STRB     r5,[r4,#1]            ;1295
                  |L1.444|
0001bc  2002              MOVS     r0,#2                 ;1296
0001be  e00e              B        |L1.478|
                  |L1.448|
0001c0  4621              MOV      r1,r4                 ;1285
0001c2  f7fffffe          BL       DAP_SWD_Transfer
0001c6  e00a              B        |L1.478|
0001c8  7809              LDRB     r1,[r1,#0]            ;1301  ; DAP_Data
0001ca  2901              CMP      r1,#1                 ;1301
0001cc  d004              BEQ      |L1.472|
0001ce  7025              STRB     r5,[r4,#0]            ;1313
0001d0  7065              STRB     r5,[r4,#1]            ;1314
0001d2  70a5              STRB     r5,[r4,#2]            ;1315
0001d4  2003              MOVS     r0,#3                 ;1316
0001d6  e002              B        |L1.478|
                  |L1.472|
0001d8  4621              MOV      r1,r4                 ;1304
0001da  f7fffffe          BL       DAP_SWD_TransferBlock
                  |L1.478|
0001de  1c40              ADDS     r0,r0,#1              ;1304
0001e0  e717              B        |L1.18|
0001e2  7809              LDRB     r1,[r1,#0]            ;1321  ; DAP_Data
0001e4  2901              CMP      r1,#1                 ;1321
0001e6  d002              BEQ      |L1.494|
0001e8  7023              STRB     r3,[r4,#0]            ;1333
0001ea  2002              MOVS     r0,#2                 ;1334
0001ec  e711              B        |L1.18|
                  |L1.494|
0001ee  7907              LDRB     r7,[r0,#4]
0001f0  1c40              ADDS     r0,r0,#1
0001f2  f7fffffe          BL       __aeabi_uread4
0001f6  f367601f          BFI      r0,r7,#24,#8
0001fa  9000              STR      r0,[sp,#0]
0001fc  4669              MOV      r1,sp
0001fe  2000              MOVS     r0,#0
000200  f7fffffe          BL       SWD_Transfer
000204  e7d3              B        |L1.430|
                  |L1.518|
000206  f8043c01          STRB     r3,[r4,#-1]           ;1339
00020a  2001              MOVS     r0,#1                 ;1340
00020c  e701              B        |L1.18|
;;;1345   
                          ENDP

00020e  0000              DCW      0x0000
                  |L1.528|
                          DCD      0x40010c10
                  |L1.532|
                          DCD      ||.bss||
                  |L1.536|
                          DCD      ||.constdata||
                  |L1.540|
                          DCD      SystemCoreClock
                  |L1.544|
                          DCD      0x000f4240

                          AREA ||i.DAP_ProcessVendorCommand||, CODE, READONLY, ALIGN=1

                  DAP_ProcessVendorCommand PROC
;;;1190   //   return:   number of bytes in response
;;;1191   __weak uint32_t DAP_ProcessVendorCommand(uint8_t *request, uint8_t *response) {
000000  20ff              MOVS     r0,#0xff
;;;1192     *response = ID_DAP_Invalid;
000002  7008              STRB     r0,[r1,#0]
;;;1193     return (1);
000004  2001              MOVS     r0,#1
;;;1194   }
000006  4770              BX       lr
;;;1195   
                          ENDP


                          AREA ||i.DAP_SWD_Transfer||, CODE, READONLY, ALIGN=2

                  DAP_SWD_Transfer PROC
;;;616    #if (DAP_SWD != 0)
;;;617    static uint32_t DAP_SWD_Transfer(uint8_t *request, uint8_t *response) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  4605              MOV      r5,r0
000006  b085              SUB      sp,sp,#0x14
;;;618      uint32_t  request_count;
;;;619      uint32_t  request_value;
;;;620      uint32_t  response_count;
;;;621      uint32_t  response_value;
;;;622      uint8_t  *response_head;
;;;623      uint32_t  post_read;
;;;624      uint32_t  check_write;
;;;625      uint32_t  match_value;
;;;626      uint32_t  match_retry;
;;;627      uint32_t  retry;
;;;628      uint32_t  data;
;;;629    
;;;630      response_count = 0;
000008  2000              MOVS     r0,#0
;;;631      response_value = 0;
;;;632      response_head  = response;
;;;633      response      += 2;
;;;634    
;;;635      DAP_TransferAbort = 0;
00000a  f8df92c4          LDR      r9,|L3.720|
00000e  e9cd0101          STRD     r0,r1,[sp,#4]
000012  1c8c              ADDS     r4,r1,#2              ;632
000014  f8890000          STRB     r0,[r9,#0]
;;;636    
;;;637      post_read   = 0;
;;;638      check_write = 0;
;;;639    
;;;640      request++;            // Ignore DAP index
;;;641    
;;;642      request_count = *request++;
000018  7869              LDRB     r1,[r5,#1]
00001a  4606              MOV      r6,r0                 ;637
00001c  4682              MOV      r10,r0                ;638
;;;643      while (request_count--) {
;;;644        request_value = *request++;
;;;645        if (request_value & DAP_TRANSFER_RnW) {
;;;646          // Read register
;;;647          if (post_read) {
;;;648            // Read was posted before
;;;649            retry = DAP_Data.transfer.retry_count;
00001e  f8dfb2b4          LDR      r11,|L3.724|
000022  1cad              ADDS     r5,r5,#2
000024  9104              STR      r1,[sp,#0x10]         ;617
000026  e10c              B        |L3.578|
                  |L3.40|
000028  f8158b01          LDRB     r8,[r5],#1            ;644
00002c  ea5f7188          LSLS     r1,r8,#30             ;645
000030  d57e              BPL      |L3.304|
000032  b38e              CBZ      r6,|L3.152|
000034  f8bb700a          LDRH     r7,[r11,#0xa]  ; DAP_Data
;;;650            if ((request_value & (DAP_TRANSFER_APnDP | DAP_TRANSFER_MATCH_VALUE)) == DAP_TRANSFER_APnDP) {
000038  f0080011          AND      r0,r8,#0x11
00003c  2801              CMP      r0,#1
00003e  d007              BEQ      |L3.80|
000040  464e              MOV      r6,r9                 ;635
                  |L3.66|
;;;651              // Read previous AP data and post next AP read
;;;652              do {
;;;653                response_value = SWD_Transfer(request_value, &data);
;;;654              } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
;;;655            } else {
;;;656              // Read previous AP data
;;;657              do {
;;;658                response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
000042  4669              MOV      r1,sp
000044  200e              MOVS     r0,#0xe
000046  f7fffffe          BL       SWD_Transfer
;;;659              } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
00004a  2802              CMP      r0,#2
00004c  d00d              BEQ      |L3.106|
00004e  e011              B        |L3.116|
                  |L3.80|
000050  4669              MOV      r1,sp                 ;653
000052  4640              MOV      r0,r8                 ;653
000054  f7fffffe          BL       SWD_Transfer
000058  2802              CMP      r0,#2                 ;654
00005a  d10c              BNE      |L3.118|
00005c  1e7f              SUBS     r7,r7,#1              ;654
00005e  d303              BCC      |L3.104|
000060  f8991000          LDRB     r1,[r9,#0]            ;654  ; DAP_TransferAbort
000064  2900              CMP      r1,#0                 ;654
000066  d0f3              BEQ      |L3.80|
                  |L3.104|
000068  e127              B        |L3.698|
                  |L3.106|
00006a  1e7f              SUBS     r7,r7,#1              ;654
00006c  d302              BCC      |L3.116|
00006e  7831              LDRB     r1,[r6,#0]  ; DAP_TransferAbort
000070  2900              CMP      r1,#0
000072  d0e6              BEQ      |L3.66|
                  |L3.116|
;;;660              post_read = 0;
000074  2600              MOVS     r6,#0
                  |L3.118|
;;;661            }
;;;662            if (response_value != DAP_TRANSFER_OK) break;
000076  2801              CMP      r0,#1
000078  d1f6              BNE      |L3.104|
;;;663            // Store previous AP data
;;;664            *response++ = (uint8_t) data;
00007a  9900              LDR      r1,[sp,#0]
00007c  f8041b01          STRB     r1,[r4],#1
;;;665            *response++ = (uint8_t)(data >>  8);
000080  9900              LDR      r1,[sp,#0]
000082  0a09              LSRS     r1,r1,#8
000084  f8041b01          STRB     r1,[r4],#1
;;;666            *response++ = (uint8_t)(data >> 16);
000088  9900              LDR      r1,[sp,#0]
00008a  0c09              LSRS     r1,r1,#16
00008c  f8041b02          STRB     r1,[r4],#2
;;;667            *response++ = (uint8_t)(data >> 24);
000090  9900              LDR      r1,[sp,#0]
000092  0e09              LSRS     r1,r1,#24
000094  f8041c01          STRB     r1,[r4,#-1]
                  |L3.152|
;;;668          }
;;;669          if (request_value & DAP_TRANSFER_MATCH_VALUE) {
000098  ea5f61c8          LSLS     r1,r8,#27
00009c  d54c              BPL      |L3.312|
;;;670            // Read with value match
;;;671            match_value = (*(request+0) <<  0) |
00009e  78ef              LDRB     r7,[r5,#3]
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       __aeabi_uread4
0000a6  f367601f          BFI      r0,r7,#24,#8
;;;672                          (*(request+1) <<  8) |
;;;673                          (*(request+2) << 16) |
;;;674                          (*(request+3) << 24);
;;;675            request += 4;
;;;676            match_retry = DAP_Data.transfer.match_retry;
0000aa  9003              STR      r0,[sp,#0xc]
0000ac  f8bba00c          LDRH     r10,[r11,#0xc]  ; DAP_Data
0000b0  1d2d              ADDS     r5,r5,#4
;;;677            if (request_value & DAP_TRANSFER_APnDP) {
0000b2  ea5f70c8          LSLS     r0,r8,#31
0000b6  d011              BEQ      |L3.220|
;;;678              // Post AP read
;;;679              retry = DAP_Data.transfer.retry_count;
0000b8  f8bb700a          LDRH     r7,[r11,#0xa]  ; DAP_Data
                  |L3.188|
;;;680              do {
;;;681                response_value = SWD_Transfer(request_value, NULL);
0000bc  2100              MOVS     r1,#0
0000be  4640              MOV      r0,r8
0000c0  f7fffffe          BL       SWD_Transfer
;;;682              } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
0000c4  2802              CMP      r0,#2
0000c6  d002              BEQ      |L3.206|
;;;683              if (response_value != DAP_TRANSFER_OK) break;
0000c8  2801              CMP      r0,#1
0000ca  d1cd              BNE      |L3.104|
0000cc  e006              B        |L3.220|
                  |L3.206|
0000ce  1e7f              SUBS     r7,r7,#1
0000d0  d3ca              BCC      |L3.104|
0000d2  f8991000          LDRB     r1,[r9,#0]            ;682  ; DAP_TransferAbort
0000d6  2900              CMP      r1,#0                 ;682
0000d8  d0f0              BEQ      |L3.188|
0000da  e0ee              B        |L3.698|
                  |L3.220|
;;;684            }
;;;685            do {
;;;686              // Read register until its value matches or retry counter expires
;;;687              retry = DAP_Data.transfer.retry_count;
0000dc  f8bb700a          LDRH     r7,[r11,#0xa]  ; DAP_Data
                  |L3.224|
;;;688              do {
;;;689                response_value = SWD_Transfer(request_value, &data);
0000e0  4669              MOV      r1,sp
0000e2  4640              MOV      r0,r8
0000e4  f7fffffe          BL       SWD_Transfer
;;;690              } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
0000e8  2802              CMP      r0,#2
0000ea  d002              BEQ      |L3.242|
;;;691              if (response_value != DAP_TRANSFER_OK) break;
0000ec  2801              CMP      r0,#1
0000ee  d115              BNE      |L3.284|
0000f0  e006              B        |L3.256|
                  |L3.242|
0000f2  1e7f              SUBS     r7,r7,#1
0000f4  d312              BCC      |L3.284|
0000f6  f8991000          LDRB     r1,[r9,#0]            ;690  ; DAP_TransferAbort
0000fa  2900              CMP      r1,#0                 ;690
0000fc  d0f0              BEQ      |L3.224|
0000fe  e00d              B        |L3.284|
                  |L3.256|
;;;692            } while (((data & DAP_Data.transfer.match_mask) != match_value) && match_retry-- && !DAP_TransferAbort);
000100  f8db1010          LDR      r1,[r11,#0x10]  ; DAP_Data
000104  9a00              LDR      r2,[sp,#0]
000106  4011              ANDS     r1,r1,r2
000108  9a03              LDR      r2,[sp,#0xc]
00010a  4291              CMP      r1,r2
00010c  d006              BEQ      |L3.284|
00010e  f1ba0a01          SUBS     r10,r10,#1
000112  d303              BCC      |L3.284|
000114  f8991000          LDRB     r1,[r9,#0]  ; DAP_TransferAbort
000118  2900              CMP      r1,#0
00011a  d0df              BEQ      |L3.220|
                  |L3.284|
;;;693            if ((data & DAP_Data.transfer.match_mask) != match_value) {
00011c  f8db1010          LDR      r1,[r11,#0x10]  ; DAP_Data
000120  9a00              LDR      r2,[sp,#0]
000122  4011              ANDS     r1,r1,r2
000124  9a03              LDR      r2,[sp,#0xc]
000126  4291              CMP      r1,r2
000128  d001              BEQ      |L3.302|
;;;694              response_value |= DAP_TRANSFER_MISMATCH;
00012a  f0400010          ORR      r0,r0,#0x10
                  |L3.302|
;;;695            }
;;;696            if (response_value != DAP_TRANSFER_OK) break;
00012e  e000              B        |L3.306|
                  |L3.304|
000130  e03b              B        |L3.426|
                  |L3.306|
000132  2801              CMP      r0,#1
000134  d115              BNE      |L3.354|
000136  e036              B        |L3.422|
                  |L3.312|
;;;697          } else {
;;;698            // Normal read
;;;699            retry = DAP_Data.transfer.retry_count;
000138  f8bb700a          LDRH     r7,[r11,#0xa]  ; DAP_Data
;;;700            if (request_value & DAP_TRANSFER_APnDP) {
00013c  ea5f71c8          LSLS     r1,r8,#31
000140  d012              BEQ      |L3.360|
;;;701              // Read AP register
;;;702              if (post_read == 0) {
000142  bb86              CBNZ     r6,|L3.422|
000144  464e              MOV      r6,r9                 ;635
                  |L3.326|
;;;703                // Post AP read
;;;704                do {
;;;705                  response_value = SWD_Transfer(request_value, NULL);
000146  2100              MOVS     r1,#0
000148  4640              MOV      r0,r8
00014a  f7fffffe          BL       SWD_Transfer
;;;706                } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
00014e  2802              CMP      r0,#2
000150  d002              BEQ      |L3.344|
;;;707                if (response_value != DAP_TRANSFER_OK) break;
000152  2801              CMP      r0,#1
000154  d105              BNE      |L3.354|
000156  e005              B        |L3.356|
                  |L3.344|
000158  1e7f              SUBS     r7,r7,#1
00015a  d302              BCC      |L3.354|
00015c  7831              LDRB     r1,[r6,#0]            ;706  ; DAP_TransferAbort
00015e  2900              CMP      r1,#0                 ;706
000160  d0f1              BEQ      |L3.326|
                  |L3.354|
000162  e0aa              B        |L3.698|
                  |L3.356|
;;;708                post_read = 1;
000164  2601              MOVS     r6,#1
000166  e01e              B        |L3.422|
                  |L3.360|
;;;709              }
;;;710            } else {
;;;711              // Read DP register
;;;712              do {
;;;713                response_value = SWD_Transfer(request_value, &data);
000168  4669              MOV      r1,sp
00016a  4640              MOV      r0,r8
00016c  f7fffffe          BL       SWD_Transfer
;;;714              } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
000170  2802              CMP      r0,#2
000172  d002              BEQ      |L3.378|
;;;715              if (response_value != DAP_TRANSFER_OK) break;
000174  2801              CMP      r0,#1
000176  d106              BNE      |L3.390|
000178  e006              B        |L3.392|
                  |L3.378|
00017a  1e7f              SUBS     r7,r7,#1
00017c  d303              BCC      |L3.390|
00017e  f8991000          LDRB     r1,[r9,#0]            ;714  ; DAP_TransferAbort
000182  2900              CMP      r1,#0                 ;714
000184  d0f0              BEQ      |L3.360|
                  |L3.390|
000186  e098              B        |L3.698|
                  |L3.392|
;;;716              // Store data
;;;717              *response++ = (uint8_t) data;
000188  9900              LDR      r1,[sp,#0]
00018a  f8041b01          STRB     r1,[r4],#1
;;;718              *response++ = (uint8_t)(data >>  8);
00018e  9900              LDR      r1,[sp,#0]
000190  0a09              LSRS     r1,r1,#8
000192  f8041b01          STRB     r1,[r4],#1
;;;719              *response++ = (uint8_t)(data >> 16);
000196  9900              LDR      r1,[sp,#0]
000198  0c09              LSRS     r1,r1,#16
00019a  f8041b02          STRB     r1,[r4],#2
;;;720              *response++ = (uint8_t)(data >> 24);
00019e  9900              LDR      r1,[sp,#0]
0001a0  0e09              LSRS     r1,r1,#24
0001a2  f8041c01          STRB     r1,[r4,#-1]
                  |L3.422|
;;;721            }
;;;722          }
;;;723          check_write = 0;
0001a6  2100              MOVS     r1,#0
0001a8  e044              B        |L3.564|
                  |L3.426|
;;;724        } else {
;;;725          // Write register
;;;726          if (post_read) {
0001aa  b30e              CBZ      r6,|L3.496|
;;;727            // Read previous data
;;;728            retry = DAP_Data.transfer.retry_count;
0001ac  f8bb600a          LDRH     r6,[r11,#0xa]  ; DAP_Data
0001b0  464f              MOV      r7,r9                 ;635
                  |L3.434|
;;;729            do {
;;;730              response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
0001b2  4669              MOV      r1,sp
0001b4  200e              MOVS     r0,#0xe
0001b6  f7fffffe          BL       SWD_Transfer
;;;731            } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
0001ba  2802              CMP      r0,#2
0001bc  d002              BEQ      |L3.452|
;;;732            if (response_value != DAP_TRANSFER_OK) break;
0001be  2801              CMP      r0,#1
0001c0  d17b              BNE      |L3.698|
0001c2  e005              B        |L3.464|
                  |L3.452|
0001c4  1e76              SUBS     r6,r6,#1
0001c6  d378              BCC      |L3.698|
0001c8  7839              LDRB     r1,[r7,#0]            ;731  ; DAP_TransferAbort
0001ca  2900              CMP      r1,#0                 ;731
0001cc  d0f1              BEQ      |L3.434|
0001ce  e074              B        |L3.698|
                  |L3.464|
;;;733            // Store previous data
;;;734            *response++ = (uint8_t) data;
0001d0  9800              LDR      r0,[sp,#0]
0001d2  f8040b01          STRB     r0,[r4],#1
;;;735            *response++ = (uint8_t)(data >>  8);
0001d6  9800              LDR      r0,[sp,#0]
0001d8  0a00              LSRS     r0,r0,#8
0001da  f8040b01          STRB     r0,[r4],#1
;;;736            *response++ = (uint8_t)(data >> 16);
0001de  9800              LDR      r0,[sp,#0]
0001e0  0c00              LSRS     r0,r0,#16
0001e2  f8040b02          STRB     r0,[r4],#2
;;;737            *response++ = (uint8_t)(data >> 24);
0001e6  9800              LDR      r0,[sp,#0]
0001e8  0e00              LSRS     r0,r0,#24
0001ea  f8040c01          STRB     r0,[r4,#-1]
;;;738            post_read = 0;
0001ee  2600              MOVS     r6,#0
                  |L3.496|
;;;739          }
;;;740          // Load data
;;;741          data = (*(request+0) <<  0) |
0001f0  78ef              LDRB     r7,[r5,#3]
0001f2  4628              MOV      r0,r5
0001f4  f7fffffe          BL       __aeabi_uread4
0001f8  f367601f          BFI      r0,r7,#24,#8
0001fc  1d2d              ADDS     r5,r5,#4
;;;742                 (*(request+1) <<  8) |
;;;743                 (*(request+2) << 16) |
;;;744                 (*(request+3) << 24);
;;;745          request += 4;
;;;746          if (request_value & DAP_TRANSFER_MATCH_MASK) {
0001fe  9000              STR      r0,[sp,#0]
000200  ea5f6188          LSLS     r1,r8,#26
000204  d503              BPL      |L3.526|
;;;747            // Write match mask
;;;748            DAP_Data.transfer.match_mask = data;
;;;749            response_value = DAP_TRANSFER_OK;
000206  f8cb0010          STR      r0,[r11,#0x10]  ; DAP_Data
00020a  2001              MOVS     r0,#1
00020c  e013              B        |L3.566|
                  |L3.526|
;;;750          } else {
;;;751            // Write DP/AP register
;;;752            retry = DAP_Data.transfer.retry_count;
00020e  f8bb700a          LDRH     r7,[r11,#0xa]  ; DAP_Data
                  |L3.530|
;;;753            do {
;;;754              response_value = SWD_Transfer(request_value, &data);
000212  4669              MOV      r1,sp
000214  4640              MOV      r0,r8
000216  f7fffffe          BL       SWD_Transfer
;;;755            } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
00021a  2802              CMP      r0,#2
00021c  d002              BEQ      |L3.548|
;;;756            if (response_value != DAP_TRANSFER_OK) break;
00021e  2801              CMP      r0,#1
000220  d14b              BNE      |L3.698|
000222  e006              B        |L3.562|
                  |L3.548|
000224  1e7f              SUBS     r7,r7,#1
000226  d348              BCC      |L3.698|
000228  f8991000          LDRB     r1,[r9,#0]            ;755  ; DAP_TransferAbort
00022c  2900              CMP      r1,#0                 ;755
00022e  d0f0              BEQ      |L3.530|
000230  e043              B        |L3.698|
                  |L3.562|
;;;757            check_write = 1;
000232  2101              MOVS     r1,#1
                  |L3.564|
000234  468a              MOV      r10,r1
                  |L3.566|
;;;758          }
;;;759        }
;;;760        response_count++;
000236  9901              LDR      r1,[sp,#4]
000238  1c49              ADDS     r1,r1,#1
;;;761        if (DAP_TransferAbort) break;
00023a  9101              STR      r1,[sp,#4]
00023c  f8991000          LDRB     r1,[r9,#0]  ; DAP_TransferAbort
000240  b929              CBNZ     r1,|L3.590|
                  |L3.578|
000242  9904              LDR      r1,[sp,#0x10]         ;643
000244  1e49              SUBS     r1,r1,#1              ;643
000246  9104              STR      r1,[sp,#0x10]         ;643
000248  1c49              ADDS     r1,r1,#1              ;643
00024a  f47faeed          BNE      |L3.40|
                  |L3.590|
;;;762      }
;;;763    
;;;764      if (response_value == DAP_TRANSFER_OK) {
00024e  2801              CMP      r0,#1
000250  d133              BNE      |L3.698|
;;;765        if (post_read) {
000252  b30e              CBZ      r6,|L3.664|
;;;766          // Read previous data
;;;767          retry = DAP_Data.transfer.retry_count;
000254  f8bb500a          LDRH     r5,[r11,#0xa]  ; DAP_Data
000258  464e              MOV      r6,r9                 ;635
                  |L3.602|
;;;768          do {
;;;769            response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, &data);
00025a  4669              MOV      r1,sp
00025c  200e              MOVS     r0,#0xe
00025e  f7fffffe          BL       SWD_Transfer
;;;770          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
000262  2802              CMP      r0,#2
000264  d002              BEQ      |L3.620|
;;;771          if (response_value != DAP_TRANSFER_OK) goto end;
000266  2801              CMP      r0,#1
000268  d127              BNE      |L3.698|
00026a  e005              B        |L3.632|
                  |L3.620|
00026c  1e6d              SUBS     r5,r5,#1
00026e  d324              BCC      |L3.698|
000270  7831              LDRB     r1,[r6,#0]            ;770  ; DAP_TransferAbort
000272  2900              CMP      r1,#0                 ;770
000274  d0f1              BEQ      |L3.602|
000276  e020              B        |L3.698|
                  |L3.632|
;;;772          // Store previous data
;;;773          *response++ = (uint8_t) data;
000278  9900              LDR      r1,[sp,#0]
00027a  f8041b01          STRB     r1,[r4],#1
;;;774          *response++ = (uint8_t)(data >>  8);
00027e  9900              LDR      r1,[sp,#0]
000280  0a09              LSRS     r1,r1,#8
000282  f8041b01          STRB     r1,[r4],#1
;;;775          *response++ = (uint8_t)(data >> 16);
000286  9900              LDR      r1,[sp,#0]
000288  0c09              LSRS     r1,r1,#16
00028a  f8041b02          STRB     r1,[r4],#2
;;;776          *response++ = (uint8_t)(data >> 24);
00028e  9900              LDR      r1,[sp,#0]
000290  0e09              LSRS     r1,r1,#24
000292  f8041c01          STRB     r1,[r4,#-1]
000296  e010              B        |L3.698|
                  |L3.664|
;;;777        } else if (check_write) {
000298  f1ba0f00          CMP      r10,#0
00029c  d00d              BEQ      |L3.698|
;;;778          // Check last write
;;;779          retry = DAP_Data.transfer.retry_count;
00029e  f8bb500a          LDRH     r5,[r11,#0xa]  ; DAP_Data
0002a2  464e              MOV      r6,r9                 ;635
                  |L3.676|
;;;780          do {
;;;781            response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
0002a4  2100              MOVS     r1,#0
0002a6  200e              MOVS     r0,#0xe
0002a8  f7fffffe          BL       SWD_Transfer
;;;782          } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
0002ac  2802              CMP      r0,#2
0002ae  d104              BNE      |L3.698|
0002b0  1e6d              SUBS     r5,r5,#1
0002b2  d302              BCC      |L3.698|
0002b4  7831              LDRB     r1,[r6,#0]  ; DAP_TransferAbort
0002b6  2900              CMP      r1,#0
0002b8  d0f4              BEQ      |L3.676|
                  |L3.698|
0002ba  e9dd1201          LDRD     r1,r2,[sp,#4]
;;;783        }
;;;784      }
;;;785    
;;;786    end:
;;;787      *(response_head+0) = (uint8_t)response_count;
0002be  7011              STRB     r1,[r2,#0]
;;;788      *(response_head+1) = (uint8_t)response_value;
0002c0  9902              LDR      r1,[sp,#8]
0002c2  7048              STRB     r0,[r1,#1]
;;;789    
;;;790      return (response - response_head);
0002c4  9802              LDR      r0,[sp,#8]
;;;791    }
0002c6  b005              ADD      sp,sp,#0x14
0002c8  1a20              SUBS     r0,r4,r0              ;790
0002ca  e8bd8ff0          POP      {r4-r11,pc}
;;;792    #endif
                          ENDP

0002ce  0000              DCW      0x0000
                  |L3.720|
                          DCD      ||.data||
                  |L3.724|
                          DCD      ||.bss||

                          AREA ||i.DAP_SWD_TransferBlock||, CODE, READONLY, ALIGN=2

                  DAP_SWD_TransferBlock PROC
;;;998    #if (DAP_SWD != 0)
;;;999    static uint32_t DAP_SWD_TransferBlock(uint8_t *request, uint8_t *response) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1000     uint32_t  request_count;
;;;1001     uint32_t  request_value;
;;;1002     uint32_t  response_count;
;;;1003     uint32_t  response_value;
;;;1004     uint8_t  *response_head;
;;;1005     uint32_t  retry;
;;;1006     uint32_t  data;
;;;1007   
;;;1008     response_count = 0;
000004  2500              MOVS     r5,#0
;;;1009     response_value = 0;
;;;1010     response_head  = response;
;;;1011     response      += 3;
;;;1012   
;;;1013     DAP_TransferAbort = 0;
000006  f8dfb118          LDR      r11,|L4.288|
00000a  4602              MOV      r2,r0                 ;999
00000c  4628              MOV      r0,r5                 ;1009
00000e  468a              MOV      r10,r1                ;1010
000010  1cce              ADDS     r6,r1,#3              ;1011
000012  f88b5000          STRB     r5,[r11,#0]
;;;1014   
;;;1015     request++;            // Ignore DAP index
;;;1016   
;;;1017     request_count = *request | (*(request+1) << 8);
000016  7891              LDRB     r1,[r2,#2]
000018  7853              LDRB     r3,[r2,#1]
00001a  1cd2              ADDS     r2,r2,#3
00001c  ea532401          ORRS     r4,r3,r1,LSL #8
000020  d073              BEQ      |L4.266|
;;;1018     request += 2;
;;;1019     if (request_count == 0) goto end;
;;;1020   
;;;1021     request_value = *request++;
000022  f8129b01          LDRB     r9,[r2],#1
000026  4690              MOV      r8,r2
;;;1022     if (request_value & DAP_TRANSFER_RnW) {
000028  ea5f7189          LSLS     r1,r9,#30
00002c  d55d              BPL      |L4.234|
;;;1023       // Read register block
;;;1024       if (request_value & DAP_TRANSFER_APnDP) {
00002e  ea5f71c9          LSLS     r1,r9,#31
000032  d03a              BEQ      |L4.170|
;;;1025         // Post AP read
;;;1026         retry = DAP_Data.transfer.retry_count;
000034  483b              LDR      r0,|L4.292|
000036  8947              LDRH     r7,[r0,#0xa]  ; DAP_Data
                  |L4.56|
;;;1027         do {
;;;1028           response_value = SWD_Transfer(request_value, NULL);
000038  2100              MOVS     r1,#0
00003a  4648              MOV      r0,r9
00003c  f7fffffe          BL       SWD_Transfer
;;;1029         } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
000040  2802              CMP      r0,#2
000042  d002              BEQ      |L4.74|
;;;1030         if (response_value != DAP_TRANSFER_OK) goto end;
000044  2801              CMP      r0,#1
000046  d160              BNE      |L4.266|
000048  e02f              B        |L4.170|
                  |L4.74|
00004a  1e7f              SUBS     r7,r7,#1
00004c  d35d              BCC      |L4.266|
00004e  f89b1000          LDRB     r1,[r11,#0]           ;1029  ; DAP_TransferAbort
000052  2900              CMP      r1,#0                 ;1029
000054  d0f0              BEQ      |L4.56|
000056  e058              B        |L4.266|
                  |L4.88|
;;;1031       }
;;;1032       while (request_count--) {
;;;1033         // Read DP/AP register
;;;1034         if ((request_count == 0) && (request_value & DAP_TRANSFER_APnDP)) {
000058  b924              CBNZ     r4,|L4.100|
00005a  ea5f70c9          LSLS     r0,r9,#31
00005e  d001              BEQ      |L4.100|
;;;1035           // Last AP read
;;;1036           request_value = DP_RDBUFF | DAP_TRANSFER_RnW;
000060  f04f090e          MOV      r9,#0xe
                  |L4.100|
;;;1037         }
;;;1038         retry = DAP_Data.transfer.retry_count;
000064  482f              LDR      r0,|L4.292|
000066  46d8              MOV      r8,r11                ;1013
000068  8947              LDRH     r7,[r0,#0xa]  ; DAP_Data
                  |L4.106|
;;;1039         do {
;;;1040           response_value = SWD_Transfer(request_value, &data);
00006a  4669              MOV      r1,sp
00006c  4648              MOV      r0,r9
00006e  f7fffffe          BL       SWD_Transfer
;;;1041         } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
000072  2802              CMP      r0,#2
000074  d002              BEQ      |L4.124|
;;;1042         if (response_value != DAP_TRANSFER_OK) goto end;
000076  2801              CMP      r0,#1
000078  d147              BNE      |L4.266|
00007a  e006              B        |L4.138|
                  |L4.124|
00007c  1e7f              SUBS     r7,r7,#1
00007e  d344              BCC      |L4.266|
000080  f8981000          LDRB     r1,[r8,#0]            ;1041  ; DAP_TransferAbort
000084  2900              CMP      r1,#0                 ;1041
000086  d0f0              BEQ      |L4.106|
000088  e03f              B        |L4.266|
                  |L4.138|
;;;1043         // Store data
;;;1044         *response++ = (uint8_t) data;
00008a  9900              LDR      r1,[sp,#0]
00008c  f8061b01          STRB     r1,[r6],#1
;;;1045         *response++ = (uint8_t)(data >>  8);
000090  9900              LDR      r1,[sp,#0]
000092  0a09              LSRS     r1,r1,#8
000094  f8061b01          STRB     r1,[r6],#1
;;;1046         *response++ = (uint8_t)(data >> 16);
000098  9900              LDR      r1,[sp,#0]
00009a  0c09              LSRS     r1,r1,#16
00009c  f8061b02          STRB     r1,[r6],#2
;;;1047         *response++ = (uint8_t)(data >> 24);
0000a0  9900              LDR      r1,[sp,#0]
0000a2  0e09              LSRS     r1,r1,#24
0000a4  f8061c01          STRB     r1,[r6,#-1]
0000a8  1c6d              ADDS     r5,r5,#1
                  |L4.170|
0000aa  1e64              SUBS     r4,r4,#1
0000ac  d2d4              BCS      |L4.88|
0000ae  e02c              B        |L4.266|
                  |L4.176|
;;;1048         response_count++;
;;;1049       }
;;;1050     } else {
;;;1051       // Write register block
;;;1052       while (request_count--) {
;;;1053         // Load data
;;;1054         data = (*(request+0) <<  0) |
0000b0  4640              MOV      r0,r8
0000b2  f8987003          LDRB     r7,[r8,#3]
0000b6  f7fffffe          BL       __aeabi_uread4
0000ba  f367601f          BFI      r0,r7,#24,#8
;;;1055                (*(request+1) <<  8) |
;;;1056                (*(request+2) << 16) |
;;;1057                (*(request+3) << 24);
;;;1058         request += 4;
;;;1059         // Write DP/AP register
;;;1060         retry = DAP_Data.transfer.retry_count;
0000be  9000              STR      r0,[sp,#0]
0000c0  4818              LDR      r0,|L4.292|
0000c2  f1080804          ADD      r8,r8,#4              ;1058
0000c6  8947              LDRH     r7,[r0,#0xa]  ; DAP_Data
                  |L4.200|
;;;1061         do {
;;;1062           response_value = SWD_Transfer(request_value, &data);
0000c8  4669              MOV      r1,sp
0000ca  4648              MOV      r0,r9
0000cc  f7fffffe          BL       SWD_Transfer
;;;1063         } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
0000d0  2802              CMP      r0,#2
0000d2  d002              BEQ      |L4.218|
;;;1064         if (response_value != DAP_TRANSFER_OK) goto end;
0000d4  2801              CMP      r0,#1
0000d6  d118              BNE      |L4.266|
0000d8  e006              B        |L4.232|
                  |L4.218|
0000da  1e7f              SUBS     r7,r7,#1
0000dc  d315              BCC      |L4.266|
0000de  f89b1000          LDRB     r1,[r11,#0]           ;1063  ; DAP_TransferAbort
0000e2  2900              CMP      r1,#0                 ;1063
0000e4  d0f0              BEQ      |L4.200|
0000e6  e010              B        |L4.266|
                  |L4.232|
0000e8  1c6d              ADDS     r5,r5,#1              ;1063
                  |L4.234|
0000ea  1e64              SUBS     r4,r4,#1              ;1063
0000ec  d2e0              BCS      |L4.176|
;;;1065         response_count++;
;;;1066       }
;;;1067       // Check last write
;;;1068       retry = DAP_Data.transfer.retry_count;
0000ee  480d              LDR      r0,|L4.292|
0000f0  465f              MOV      r7,r11                ;1013
0000f2  8944              LDRH     r4,[r0,#0xa]  ; DAP_Data
                  |L4.244|
;;;1069       do {
;;;1070         response_value = SWD_Transfer(DP_RDBUFF | DAP_TRANSFER_RnW, NULL);
0000f4  2100              MOVS     r1,#0
0000f6  200e              MOVS     r0,#0xe
0000f8  f7fffffe          BL       SWD_Transfer
;;;1071       } while ((response_value == DAP_TRANSFER_WAIT) && retry-- && !DAP_TransferAbort);
0000fc  2802              CMP      r0,#2
0000fe  d104              BNE      |L4.266|
000100  1e64              SUBS     r4,r4,#1
000102  d302              BCC      |L4.266|
000104  7839              LDRB     r1,[r7,#0]  ; DAP_TransferAbort
000106  2900              CMP      r1,#0
000108  d0f4              BEQ      |L4.244|
                  |L4.266|
;;;1072     }
;;;1073   
;;;1074   end:
;;;1075     *(response_head+0) = (uint8_t)(response_count >> 0);
00010a  f88a5000          STRB     r5,[r10,#0]
;;;1076     *(response_head+1) = (uint8_t)(response_count >> 8);
00010e  0a2a              LSRS     r2,r5,#8
000110  f88a2001          STRB     r2,[r10,#1]
;;;1077     *(response_head+2) = (uint8_t) response_value;
000114  f88a0002          STRB     r0,[r10,#2]
;;;1078   
;;;1079     return (response - response_head);
000118  eba6000a          SUB      r0,r6,r10
;;;1080   }
00011c  e8bd8ff8          POP      {r3-r11,pc}
;;;1081   #endif
                          ENDP

                  |L4.288|
                          DCD      ||.data||
                  |L4.292|
                          DCD      ||.bss||

                          AREA ||i.DAP_SWJ_Clock||, CODE, READONLY, ALIGN=2

                  DAP_SWJ_Clock PROC
;;;357    #if ((DAP_SWD != 0) || (DAP_JTAG != 0))
;;;358    static uint32_t DAP_SWJ_Clock(uint8_t *request, uint8_t *response) {
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
;;;359      uint32_t clock;
;;;360      uint32_t delay;
;;;361    
;;;362      clock = (*(request+0) <<  0) |
000004  78c5              LDRB     r5,[r0,#3]
000006  f7fffffe          BL       __aeabi_uread4
00000a  f365601f          BFI      r0,r5,#24,#8
;;;363              (*(request+1) <<  8) |
;;;364              (*(request+2) << 16) |
;;;365              (*(request+3) << 24);
;;;366    
;;;367      if (clock == 0) {
00000e  b148              CBZ      r0,|L5.36|
;;;368        *response = DAP_ERROR;
;;;369        return (1);
;;;370      }
;;;371    
;;;372      if (clock >= MAX_SWJ_CLOCK(DELAY_FAST_CYCLES)) {
000010  490e              LDR      r1,|L5.76|
000012  2300              MOVS     r3,#0
;;;373        DAP_Data.fast_clock  = 1;
000014  4a0e              LDR      r2,|L5.80|
000016  6809              LDR      r1,[r1,#0]            ;372  ; SystemCoreClock
000018  ebb00f91          CMP      r0,r1,LSR #2          ;372
00001c  d305              BCC      |L5.42|
00001e  2001              MOVS     r0,#1
000020  7050              STRB     r0,[r2,#1]
;;;374        DAP_Data.clock_delay = 1;
000022  e00f              B        |L5.68|
                  |L5.36|
000024  20ff              MOVS     r0,#0xff              ;368
000026  7020              STRB     r0,[r4,#0]            ;368
000028  e00e              B        |L5.72|
                  |L5.42|
;;;375      } else {
;;;376        DAP_Data.fast_clock  = 0;
;;;377    
;;;378        delay = (CPU_CLOCK/2 + (clock - 1)) / clock;
00002a  eb000151          ADD      r1,r0,r1,LSR #1
00002e  1e49              SUBS     r1,r1,#1
000030  fbb1f0f0          UDIV     r0,r1,r0
000034  7053              STRB     r3,[r2,#1]            ;376
;;;379        if (delay > IO_PORT_WRITE_CYCLES) {
000036  2802              CMP      r0,#2
000038  d903              BLS      |L5.66|
;;;380          delay -= IO_PORT_WRITE_CYCLES;
;;;381          delay  = (delay + (DELAY_SLOW_CYCLES - 1)) / DELAY_SLOW_CYCLES;
00003a  2103              MOVS     r1,#3
00003c  fbb0f0f1          UDIV     r0,r0,r1
000040  e000              B        |L5.68|
                  |L5.66|
;;;382        } else {
;;;383          delay  = 1;
000042  2001              MOVS     r0,#1
                  |L5.68|
;;;384        }
;;;385    
;;;386        DAP_Data.clock_delay = delay;
;;;387      }
;;;388    
;;;389      *response = DAP_OK;
000044  6050              STR      r0,[r2,#4]  ; DAP_Data
000046  7023              STRB     r3,[r4,#0]
                  |L5.72|
;;;390      return (1);
000048  2001              MOVS     r0,#1
;;;391    }
00004a  bd70              POP      {r4-r6,pc}
;;;392    #endif
                          ENDP

                  |L5.76|
                          DCD      SystemCoreClock
                  |L5.80|
                          DCD      ||.bss||

                          AREA ||i.DAP_SWJ_Pins||, CODE, READONLY, ALIGN=2

                  DAP_SWJ_Pins PROC
;;;279    #if ((DAP_SWD != 0) || (DAP_JTAG != 0))
;;;280    static uint32_t DAP_SWJ_Pins(uint8_t *request, uint8_t *response) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;281      uint32_t value;
;;;282      uint32_t select;
;;;283      uint32_t wait;
;;;284    
;;;285      value  =  *(request+0);
000004  f8105b01          LDRB     r5,[r0],#1
000008  460f              MOV      r7,r1                 ;280
;;;286      select =  *(request+1);
00000a  f8104b01          LDRB     r4,[r0],#1
;;;287      wait   = (*(request+2) <<  0) |
00000e  78c6              LDRB     r6,[r0,#3]
000010  f7fffffe          BL       __aeabi_uread4
000014  4938              LDR      r1,|L6.248|
000016  f366601f          BFI      r0,r6,#24,#8
;;;288               (*(request+3) <<  8) |
;;;289               (*(request+4) << 16) |
;;;290               (*(request+5) << 24);
;;;291    
;;;292      if (select & (1 << DAP_SWJ_SWCLK_TCK)) {
00001a  07e3              LSLS     r3,r4,#31
00001c  f1010204          ADD      r2,r1,#4
000020  d006              BEQ      |L6.48|
;;;293        if (value & (1 << DAP_SWJ_SWCLK_TCK)) {
000022  07ee              LSLS     r6,r5,#31
000024  f44f5300          MOV      r3,#0x2000
000028  d001              BEQ      |L6.46|
00002a  600b              STR      r3,[r1,#0]
;;;294          PIN_SWCLK_TCK_SET();
00002c  e000              B        |L6.48|
                  |L6.46|
00002e  6013              STR      r3,[r2,#0]
                  |L6.48|
;;;295        } else {
;;;296          PIN_SWCLK_TCK_CLR();
;;;297        }
;;;298      }
;;;299      if (select & (1 << DAP_SWJ_SWDIO_TMS)) {
000030  07a3              LSLS     r3,r4,#30
000032  d506              BPL      |L6.66|
;;;300        if (value & (1 << DAP_SWJ_SWDIO_TMS)) {
000034  07ae              LSLS     r6,r5,#30
000036  f44f4380          MOV      r3,#0x4000
00003a  d501              BPL      |L6.64|
00003c  600b              STR      r3,[r1,#0]
;;;301          PIN_SWDIO_TMS_SET();
00003e  e000              B        |L6.66|
                  |L6.64|
000040  6013              STR      r3,[r2,#0]
                  |L6.66|
;;;302        } else {
;;;303          PIN_SWDIO_TMS_CLR();
;;;304        }
;;;305      }
;;;306      if (select & (1 << DAP_SWJ_TDI)) {
;;;307        PIN_TDI_OUT(value >> DAP_SWJ_TDI);
;;;308      }
;;;309      if (select & (1 << DAP_SWJ_nTRST)) {
;;;310        PIN_nTRST_OUT(value >> DAP_SWJ_nTRST);
;;;311      }
;;;312      if (select & (1 << DAP_SWJ_nRESET)) {
000042  0623              LSLS     r3,r4,#24
000044  d507              BPL      |L6.86|
;;;313        PIN_nRESET_OUT(value >> DAP_SWJ_nRESET);
000046  09eb              LSRS     r3,r5,#7
000048  07de              LSLS     r6,r3,#31
00004a  f04f0380          MOV      r3,#0x80
00004e  d001              BEQ      |L6.84|
000050  600b              STR      r3,[r1,#0]
000052  e000              B        |L6.86|
                  |L6.84|
000054  6013              STR      r3,[r2,#0]
                  |L6.86|
000056  4e28              LDR      r6,|L6.248|
000058  1f36              SUBS     r6,r6,#4
00005a  1f32              SUBS     r2,r6,#4
00005c  2100              MOVS     r1,#0
;;;314      }
;;;315    
;;;316      if (wait) {
00005e  b3d0              CBZ      r0,|L6.214|
;;;317        if (wait > 3000000) wait = 3000000;
000060  4b26              LDR      r3,|L6.252|
000062  4298              CMP      r0,r3
000064  d900              BLS      |L6.104|
000066  4618              MOV      r0,r3
                  |L6.104|
000068  f04f23e0          MOV      r3,#0xe000e000
00006c  6199              STR      r1,[r3,#0x18]
00006e  f8dfc090          LDR      r12,|L6.256|
000072  f8dcc000          LDR      r12,[r12,#0]  ; SystemCoreClock
000076  fb00f00c          MUL      r0,r0,r12
00007a  f8dfc088          LDR      r12,|L6.260|
00007e  fbb0f0fc          UDIV     r0,r0,r12
000082  6158              STR      r0,[r3,#0x14]
000084  2005              MOVS     r0,#5
000086  6118              STR      r0,[r3,#0x10]
                  |L6.136|
;;;318        TIMER_START(wait);
;;;319        do {
;;;320          if (select & (1 << DAP_SWJ_SWCLK_TCK)) {
000088  07e0              LSLS     r0,r4,#31
00008a  d004              BEQ      |L6.150|
00008c  6830              LDR      r0,[r6,#0]
00008e  f3c03040          UBFX     r0,r0,#13,#1
;;;321            if ((value >> DAP_SWJ_SWCLK_TCK) ^ PIN_SWCLK_TCK_IN()) continue;
000092  42a8              CMP      r0,r5
000094  d119              BNE      |L6.202|
                  |L6.150|
;;;322          }
;;;323          if (select & (1 << DAP_SWJ_SWDIO_TMS)) {
000096  07a0              LSLS     r0,r4,#30
000098  d505              BPL      |L6.166|
00009a  6810              LDR      r0,[r2,#0]
00009c  f3c03000          UBFX     r0,r0,#12,#1
;;;324            if ((value >> DAP_SWJ_SWDIO_TMS) ^ PIN_SWDIO_TMS_IN()) continue;
0000a0  ebb00f55          CMP      r0,r5,LSR #1
0000a4  d111              BNE      |L6.202|
                  |L6.166|
;;;325          }
;;;326          if (select & (1 << DAP_SWJ_TDI)) {
0000a6  0760              LSLS     r0,r4,#29
0000a8  d502              BPL      |L6.176|
;;;327            if ((value >> DAP_SWJ_TDI) ^ PIN_TDI_IN()) continue;
0000aa  ebb10f95          CMP      r1,r5,LSR #2
0000ae  d10c              BNE      |L6.202|
                  |L6.176|
;;;328          }
;;;329          if (select & (1 << DAP_SWJ_nTRST)) {
0000b0  06a0              LSLS     r0,r4,#26
0000b2  d502              BPL      |L6.186|
;;;330            if ((value >> DAP_SWJ_nTRST) ^ PIN_nTRST_IN()) continue;
0000b4  ebb11f55          CMP      r1,r5,LSR #5
0000b8  d107              BNE      |L6.202|
                  |L6.186|
;;;331          }
;;;332          if (select & (1 << DAP_SWJ_nRESET)) {
0000ba  0620              LSLS     r0,r4,#24
0000bc  d50a              BPL      |L6.212|
0000be  6810              LDR      r0,[r2,#0]
0000c0  f3c010c0          UBFX     r0,r0,#7,#1
;;;333            if ((value >> DAP_SWJ_nRESET) ^ PIN_nRESET_IN()) continue;
0000c4  ebb01fd5          CMP      r0,r5,LSR #7
0000c8  d004              BEQ      |L6.212|
                  |L6.202|
0000ca  6918              LDR      r0,[r3,#0x10]
0000cc  f3c04000          UBFX     r0,r0,#16,#1
;;;334          }
;;;335          break;
;;;336        } while (!TIMER_EXPIRED());
0000d0  2800              CMP      r0,#0
0000d2  d0d9              BEQ      |L6.136|
                  |L6.212|
0000d4  6119              STR      r1,[r3,#0x10]
                  |L6.214|
0000d6  6830              LDR      r0,[r6,#0]
0000d8  6811              LDR      r1,[r2,#0]
0000da  f3c03040          UBFX     r0,r0,#13,#1
0000de  f3c13100          UBFX     r1,r1,#12,#1
;;;337        TIMER_STOP();
;;;338      }
;;;339    
;;;340      value = (PIN_SWCLK_TCK_IN() << DAP_SWJ_SWCLK_TCK) |
0000e2  ea400041          ORR      r0,r0,r1,LSL #1
0000e6  6811              LDR      r1,[r2,#0]
0000e8  09c9              LSRS     r1,r1,#7
0000ea  ea4010c1          ORR      r0,r0,r1,LSL #7
;;;341              (PIN_SWDIO_TMS_IN() << DAP_SWJ_SWDIO_TMS) |
;;;342              (PIN_TDI_IN()       << DAP_SWJ_TDI)       |
;;;343              (PIN_TDO_IN()       << DAP_SWJ_TDO)       |
;;;344              (PIN_nTRST_IN()     << DAP_SWJ_nTRST)     |
;;;345              (PIN_nRESET_IN()    << DAP_SWJ_nRESET);
;;;346    
;;;347      *response = (uint8_t)value;
0000ee  7038              STRB     r0,[r7,#0]
;;;348      return (1);
0000f0  2001              MOVS     r0,#1
;;;349    }
0000f2  e8bd81f0          POP      {r4-r8,pc}
;;;350    #endif
                          ENDP

0000f6  0000              DCW      0x0000
                  |L6.248|
                          DCD      0x40010c10
                  |L6.252|
                          DCD      0x002dc6c0
                  |L6.256|
                          DCD      SystemCoreClock
                  |L6.260|
                          DCD      0x000f4240

                          AREA ||i.DAP_Setup||, CODE, READONLY, ALIGN=2

                  DAP_Setup PROC
;;;1347   // Setup DAP
;;;1348   void DAP_Setup(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;1349   
;;;1350     // Default settings (only non-zero values)
;;;1351   //DAP_Data.debug_port  = 0;
;;;1352   //DAP_Data.fast_clock  = 0;
;;;1353     DAP_Data.clock_delay = CLOCK_DELAY(DAP_DEFAULT_SWJ_CLOCK);
000002  4818              LDR      r0,|L7.100|
000004  4918              LDR      r1,|L7.104|
000006  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000008  fbb0f1f1          UDIV     r1,r0,r1
00000c  4817              LDR      r0,|L7.108|
00000e  1e89              SUBS     r1,r1,#2
;;;1354   //DAP_Data.transfer.idle_cycles = 0;
;;;1355     DAP_Data.transfer.retry_count = 100;
000010  6041              STR      r1,[r0,#4]  ; DAP_Data
000012  2164              MOVS     r1,#0x64
000014  8141              STRH     r1,[r0,#0xa]
;;;1356   //DAP_Data.transfer.match_retry = 0;
;;;1357   //DAP_Data.transfer.match_mask  = 0x000000;
;;;1358   #if (DAP_SWD != 0)
;;;1359     DAP_Data.swd_conf.turnaround  = 1;
000016  2101              MOVS     r1,#1
000018  7501              STRB     r1,[r0,#0x14]
00001a  201c              MOVS     r0,#0x1c
00001c  f7fffffe          BL       RCC_APB2PeriphClock_Enable
000020  4d13              LDR      r5,|L7.112|
000022  210d              MOVS     r1,#0xd
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       pin_out
00002a  4c11              LDR      r4,|L7.112|
00002c  1468              ASRS     r0,r5,#17
00002e  3410              ADDS     r4,r4,#0x10
000030  6020              STR      r0,[r4,#0]
000032  210e              MOVS     r1,#0xe
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       pin_out
00003a  f44f4080          MOV      r0,#0x4000
00003e  6020              STR      r0,[r4,#0]
000040  2202              MOVS     r2,#2
000042  210c              MOVS     r1,#0xc
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       pin_in
00004a  2107              MOVS     r1,#7
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       pin_out
000052  2080              MOVS     r0,#0x80
000054  6020              STR      r0,[r4,#0]
000056  2106              MOVS     r1,#6
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       pin_out
00005e  2040              MOVS     r0,#0x40
000060  6020              STR      r0,[r4,#0]
;;;1360   //DAP_Data.swd_conf.data_phase  = 0;
;;;1361   #endif
;;;1362   #if (DAP_JTAG != 0)
;;;1363   //DAP_Data.jtag_dev.count = 0;
;;;1364   #endif
;;;1365   
;;;1366     DAP_SETUP();  // Device specific setup
;;;1367   }
000062  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L7.100|
                          DCD      SystemCoreClock
                  |L7.104|
                          DCD      0x00989680
                  |L7.108|
                          DCD      ||.bss||
                  |L7.112|
                          DCD      0x40010c00

                          AREA ||i.Delayms||, CODE, READONLY, ALIGN=2

                  Delayms PROC
;;;166    //    delay:  delay time in ms
;;;167    void Delayms(uint32_t delay) {
000000  4906              LDR      r1,|L8.28|
;;;168      delay *= (CPU_CLOCK/1000 + (DELAY_SLOW_CYCLES-1)) / DELAY_SLOW_CYCLES;
000002  f44f727a          MOV      r2,#0x3e8
000006  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000008  fbb1f1f2          UDIV     r1,r1,r2
00000c  2203              MOVS     r2,#3
00000e  1c89              ADDS     r1,r1,#2
000010  fbb1f1f2          UDIV     r1,r1,r2
000014  4341              MULS     r1,r0,r1
                  |L8.22|
000016  1e49              SUBS     r1,r1,#1
000018  d1fd              BNE      |L8.22|
;;;169      PIN_DELAY_SLOW(delay);
;;;170    }
00001a  4770              BX       lr
;;;171    
                          ENDP

                  |L8.28|
                          DCD      SystemCoreClock

                          AREA ||i.pin_in||, CODE, READONLY, ALIGN=1

                  pin_in PROC
;;;118    
;;;119    static __inline void pin_in(GPIO_TypeDef* GPIOx, uint8_t pin_bit, uint8_t mode)
000000  b570              PUSH     {r4-r6,lr}
;;;120    {
;;;121        // mode : 0     analog input
;;;122        //        1     float input
;;;123        //        2     pullup input 
;;;124        //        3     pulldowm input
;;;125        uint8_t config;
;;;126        
;;;127        if(mode == 1)
000002  2a01              CMP      r2,#1
000004  d012              BEQ      |L9.44|
;;;128            config = 0x04;
;;;129        else if(mode == 2)
000006  2a02              CMP      r2,#2
000008  d012              BEQ      |L9.48|
;;;130            config = 0x08;
;;;131        else if(mode == 3)
00000a  2a03              CMP      r2,#3
00000c  d010              BEQ      |L9.48|
;;;132            config = 0x08;
;;;133        else
;;;134            config = 0x00;
00000e  2300              MOVS     r3,#0
                  |L9.16|
;;;135        
;;;136        if(pin_bit >= 8) {
;;;137            GPIOx->CTLR2 &= ~(0x0000000F << ((pin_bit-8) << 2));
000010  250f              MOVS     r5,#0xf
000012  008c              LSLS     r4,r1,#2
000014  2908              CMP      r1,#8                 ;136
000016  d30d              BCC      |L9.52|
000018  3c20              SUBS     r4,r4,#0x20           ;136
00001a  6846              LDR      r6,[r0,#4]
00001c  40a5              LSLS     r5,r5,r4
00001e  43ae              BICS     r6,r6,r5
000020  6046              STR      r6,[r0,#4]
;;;138            GPIOx->CTLR2 |= (((uint32_t)(config) & 0x0F) << ((pin_bit-8) << 2));
000022  40a3              LSLS     r3,r3,r4
000024  6844              LDR      r4,[r0,#4]
000026  4323              ORRS     r3,r3,r4
000028  6043              STR      r3,[r0,#4]
00002a  e00b              B        |L9.68|
                  |L9.44|
00002c  2304              MOVS     r3,#4                 ;128
00002e  e7ef              B        |L9.16|
                  |L9.48|
000030  2308              MOVS     r3,#8                 ;132
000032  e7ed              B        |L9.16|
                  |L9.52|
;;;139        }
;;;140        else {
;;;141            GPIOx->CTLR1 &= ~(0x0000000F << ((pin_bit) << 2));
000034  6806              LDR      r6,[r0,#0]
000036  40a5              LSLS     r5,r5,r4
000038  43ae              BICS     r6,r6,r5
00003a  6006              STR      r6,[r0,#0]
;;;142            GPIOx->CTLR1 |= ( ((uint32_t)(config) & 0x0F) << ((pin_bit) << 2) );
00003c  40a3              LSLS     r3,r3,r4
00003e  6804              LDR      r4,[r0,#0]
000040  4323              ORRS     r3,r3,r4
000042  6003              STR      r3,[r0,#0]
                  |L9.68|
000044  2301              MOVS     r3,#1                 ;120
;;;143        }
;;;144        if(mode == 2)
;;;145            GPIOx->BOR = (((uint32_t)0x01) << pin_bit);
000046  408b              LSLS     r3,r3,r1
000048  2a02              CMP      r2,#2                 ;144
00004a  d003              BEQ      |L9.84|
;;;146        else if(mode == 3)
00004c  2a03              CMP      r2,#3
00004e  d100              BNE      |L9.82|
;;;147            GPIOx->BCR = (((uint32_t)0x01) << pin_bit);
000050  6143              STR      r3,[r0,#0x14]
                  |L9.82|
;;;148    }
000052  bd70              POP      {r4-r6,pc}
                  |L9.84|
000054  6103              STR      r3,[r0,#0x10]         ;145
000056  bd70              POP      {r4-r6,pc}
;;;149    
                          ENDP


                          AREA ||i.pin_out||, CODE, READONLY, ALIGN=1

                  pin_out PROC
;;;100    
;;;101    static __inline void pin_out(GPIO_TypeDef* GPIOx, uint8_t pin_bit)
000000  b510              PUSH     {r4,lr}
;;;102    {        
;;;103        // MODE : 00 input mode                 CMF : 00 analog input
;;;104        //        01 output speed_10MHz               01 float input
;;;105        //        10 output speed_2MHz                10 pullup/pulldown input
;;;106        //        11 output speed_50MHz               11 reserved
;;;107        if(pin_bit >= 8) {
;;;108            // Clean MODE and CMF
;;;109            GPIOx->CTLR2 &= ~(0x0000000F << ((pin_bit-8) << 2));
000002  230f              MOVS     r3,#0xf
;;;110            // Set MODE 11, ignore CMF
;;;111            GPIOx->CTLR2 |= (((uint32_t)(0x00|0x03) & 0x0F) << ((pin_bit-8) << 2));
000004  2403              MOVS     r4,#3
000006  008a              LSLS     r2,r1,#2              ;109
000008  2908              CMP      r1,#8                 ;107
00000a  d309              BCC      |L10.32|
00000c  3a20              SUBS     r2,r2,#0x20           ;102
00000e  6841              LDR      r1,[r0,#4]            ;109
000010  4093              LSLS     r3,r3,r2              ;109
000012  4399              BICS     r1,r1,r3              ;109
000014  6041              STR      r1,[r0,#4]            ;109
000016  6841              LDR      r1,[r0,#4]
000018  4094              LSLS     r4,r4,r2
00001a  430c              ORRS     r4,r4,r1
00001c  6044              STR      r4,[r0,#4]
;;;112        }
;;;113        else {
;;;114            GPIOx->CTLR1 &= ~(0x0000000F << ((pin_bit) << 2));
;;;115            GPIOx->CTLR1 |= (((uint32_t)(0x00|0x03) & 0x0F) << ((pin_bit) << 2));
;;;116        }
;;;117    }
00001e  bd10              POP      {r4,pc}
                  |L10.32|
000020  6801              LDR      r1,[r0,#0]            ;114
000022  4093              LSLS     r3,r3,r2              ;114
000024  4399              BICS     r1,r1,r3              ;114
000026  6001              STR      r1,[r0,#0]            ;114
000028  6801              LDR      r1,[r0,#0]            ;115
00002a  4094              LSLS     r4,r4,r2              ;115
00002c  4321              ORRS     r1,r1,r4              ;115
00002e  6001              STR      r1,[r0,#0]            ;115
000030  bd10              POP      {r4,pc}
;;;118    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  DAP_Data
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  DAP_FW_Ver
000000  312e3000          DCB      0x31,0x2e,0x30,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  DAP_TransferAbort
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\GIGA32\\src\\DAP.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_DAP_c_33658ade____REV16|
#line 129 "..\\..\\cmsis-core\\core_cmInstr.h"
|__asm___5_DAP_c_33658ade____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_DAP_c_33658ade____REVSH|
#line 144
|__asm___5_DAP_c_33658ade____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
